import os
import re
import logging
from base import BasicCard
logger = logging.getLogger('CardConvert.cards.base')


class Cards(BasicCard):
    """
    This class is named 'cards' but Unity3d writes out these in a folder named 'output'.
    """
    @property
    def card_class(self):
        return 'cards'

    @staticmethod
    def crawler(target_dir, frame_re, anim_folder, locale_list=[]):
        """
        Function to os.walk through a target directory and collect all the cards in it.
        Args:
            target_dir (str): path to crawl
            frame_re (str): regex expression to delimit frame counter
            anim_folder (str): name of the subdir in the target_dir that contains the animated frames
            locale_list (list): list of supported locales
        Returns:
            cards (dict): cards in the target_dir with it's files
                          eg: {$card_name: {'static': 'file path', 'animated': [frames]}}
        """
        cards = {}
        if os.path.isdir(target_dir):
            for path, subdir, files in os.walk(target_dir):
                animated = False
                basename = os.path.basename(path)
                if basename in locale_list:
                    locale = basename.lower()
                    cards[locale] = {}
                if basename == anim_folder:
                    animated = True
                if not animated:
                    for file_ in sorted(files):
                        if not re.match('^\.', file_):
                            fullpath = os.path.join(path, file_)
                            header = os.path.splitext(file_)[0]
                            if header not in cards[locale]:
                                cards[locale][header] = {'static': fullpath,
                                                         'animated': []}
                if animated:
                    for file_ in sorted(files):
                        if not re.match('^\.', file_):
                            fullpath = os.path.join(path, file_)
                            header = os.path.splitext(file_)[0]
                            header = re.split(frame_re, header)[0]
                            if header in cards[locale]:
                                cards[locale][header]['animated'].append(fullpath)

        return cards

    def create_instances(self, cards_dict):
        """
        Convenience function to generate instances from a card_dict.
        Args:
            cards_dict (dict): dict generated by the crawler function
        Returns:
            cards (list): list of instances of this class
        """
        cards = []
        for locale in cards_dict:
            for name in cards_dict[locale]:
                cards.append(Cards(self.config, name=name, locale=locale, info=cards_dict[locale][name]))
        return cards

    def _make_copies(self):
        """
        Function to create copies of this card depending on the card class and it's config
        """
        self._make_small_copy()
        self._make_medium_copy()
        self._make_jpg_copy()

    def _make_animation_copies(self):
        """
        Function to create animated copies of this card depending on the card class and it's config
        """
        if self._info['animated']:
            self._make_animated_png()
            self._make_animated_gif()