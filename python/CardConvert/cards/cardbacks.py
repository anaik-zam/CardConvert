import os
import logging
from base import BasicCard
from CardConvert import exceptions
logger = logging.getLogger('CardConvert.cards.base')

class CardBacks(BasicCard):
    @property
    def card_class(self):
        return 'cardbacks'

    def create_instances(self, cards_dict):
        """
        Convenience function to generate instances from a card_dict.
        Args:
            cards_dict (dict): dict generated by the crawler function
        Returns:
            cards (list): list of instances of this class
        """
        cards = []
        for key in cards_dict:
            cards.append(CardBacks(self.config, name=key, info=cards_dict[key]))
        return cards

    def _composite_animation_frames(self):
        """
        Function to comp the card with a bg.
        Returns:
            return_code (int): process return code
            stdout_value (str): stdout
            stderr_values (str): stderr
        """
        bg_path = self._get_bg_path()
        if os.path.isfile(bg_path):
            logger.info('COMPOSITING:: %s:%s' % (self.name, self.locale))
            self._info['comp_out'] = []
            self._info['ff_out'] = []
            input_, output = self._get_input_output('animated_temp')
            dirname = os.path.dirname(output)
            for file_ in self._info['animated']:
                basename = os.path.basename(file_)
                this_out = os.path.join(dirname, basename)
                ff_out = os.path.join(dirname, 'ff_%s' % (basename))
                cmd = 'composite -gravity center %s %s %s' % (bg_path, file_, this_out)
                return_code, stdout_value, stderr_value = self.run_cmd(cmd)
                if return_code != 0:
                    raise exceptions.MakeCompositeError(cmd, return_code, stdout_value, stderr_value)
                self._info['comp_out'].append(this_out)
                cmd = 'convert %s -background "rgb(36,36,36)" -alpha remove %s' % (this_out, ff_out)
                return_code, stdout_value, stderr_value = self.run_cmd(cmd)
                if return_code != 0:
                    raise exceptions.MakeCompositeError(cmd, return_code, stdout_value, stderr_value)
                self._info['ff_out'].append(ff_out)
                # return return_code, stdout_value, stderr_value

    def _make_animated_png_cmd(self, input_, output):
        """
        Function to build a cmd to make a animated png of this card.
        Args:
            input_ (str): input file path
            output (str): output file path
        Returns:
            cmd (str): command to execute
        """
        cmd = 'apngasm %s ' % output
        for file_ in self._info['comp_out']:
            cmd += '%s ' % file_
        return cmd

    def _make_animated_png(self):
        """
        Function to create a animated png of this card.
        Returns:
            return_code (int): process return code
            stdout_value (str): stdout
            stderr_values (str): stderr
        """
        if self._info['comp_out']:
            logger.info('CREATING ANIMATED PNG:: %s:%s' % (self.name, self.locale))
            input_, output = self._get_input_output('animated')
            cmd = self._make_animated_png_cmd(input_, output)
            return_code, stdout_value, stderr_value = self.run_cmd(cmd)
            if return_code != 0:
                raise exceptions.MakeAnimatedPNGError(cmd, return_code, stdout_value, stderr_value)
            return return_code, stdout_value, stderr_value
        else:
            print 'No composite for %s' % self.name

    def _rm_temp_files(self):
        def clean(key):
            if key in self._info:
                cmd = 'rm -rf '
                for file_ in self._info[key]:
                    cmd += '%s ' % file_
                return_code, stdout_value, stderr_value = self.run_cmd(cmd)
        clean('ff_out')
        clean('comp_out')

    def _make_copies(self):
        """
        Function to create copies of this card depending on the card class and it's config
        """
        self._make_small_copy()
        self._make_medium_copy()
        self._make_jpg_copy()
        self._make_small_icons()
        self._make_medium_icons()
        self._make_large_icons()

    def _make_animation_copies(self):
        """
        Function to create animated copies of this card depending on the card class and it's config
        """
        if self._info['animated']:
            self._composite_animation_frames()
            self._make_animated_png()
            self._make_animated_gif()
            self._make_mp4()
            self._make_webm()
            self._rm_temp_files()

